@startuml

package TodoDomain.Models.Memo {
    class Memo
    interface MemoRepository

    MemoRepository --> Memo : use for update
}

package TodoApplication.Memo {
    class UpdateMemoUseCase
    class MemoData
    class MemoFactory

    UpdateMemoUseCase --> MemoData : use for create Memo
    MemoFactory --> MemoData : use
    MemoFactory --> Memo : create
    UpdateMemoUseCase o-- MemoRepository : use
}

package Presentation.Memo {
    package Update {
        class MemoUpdateController
        class MemoUpdateViewModel
        MemoUpdateController o-- MemoUpdateViewModel : use to apply data to views
        MemoUpdateController o-- UpdateMemoUseCase
        MemoUpdateController --> MemoData : pass to usecase / use to create MemoUpdateViewModel
    }
}
package Infrastructure.Memo {
    class InMemoryMemoRepository implements MemoRepository
    class InMemoryMemoEntity

    InMemoryMemoRepository --> InMemoryMemoEntity : use for update
    InMemoryMemoRepository --> Memo : receive from use case
    InMemoryMemoEntity --> Memo : use for instantiate
}

@enduml
